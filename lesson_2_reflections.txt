Q: What happens when you initialize a repository? Why do you need to do it?
A: A hidden .git file is created to track the changes/commits.

Q: How is the staging area different from the working directory and the repository? What value do you think it offers?
A: The staging area holds files which you want to use in your repository and are changed, but not committed yet. Your working
   directory looks simular, with the difference that it saves files which aren't added to the repository
   
Q: How can you use the staging area to make sure you have one commit per logical change?
A: You can compare the staging area with the repository to see what the changes are.

Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A: When adding experimental changes or adding new features, but in the meantime, keeping a master for bugfixes

Q: How do the diagrams help you visualize the branch structure?
A: With diagrams it's very understandable how the path travels. How the logs see all the parents and how branches work.

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A: Merging branches combines the code differences into 1 branches. This way a new feature can be added to the stable master

Q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
A: If no manual input is required, merging goes automatically. But it can be hard to solve it manually. Often speaking
to another developer is needed.